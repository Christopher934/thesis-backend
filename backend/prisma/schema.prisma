generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int        @id @default(autoincrement())
  employeeId     String     @unique
  username       String     @unique
  email          String     @unique
  password       String
  namaDepan      String
  namaBelakang   String
  alamat         String?
  noHp           String
  jenisKelamin   Gender
  tanggalLahir   DateTime
  role           Role
  status         UserStatus @default(ACTIVE)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  telegramChatId String?
  
  // New fields for enhanced monitoring
  totalShifts    Int        @default(0)  // Total shifts assigned
  currentMonthShifts Int    @default(0)  // Shifts this month  
  consecutiveDays    Int    @default(0)  // Consecutive working days
  lastShiftDate      DateTime?           // Last shift date
  workloadStatus     WorkloadStatus @default(NORMAL) // Current workload status
  skillLevel         SkillLevel @default(JUNIOR)     // Skill level for better assignment
  preferredLocations String?            // JSON array of preferred locations
  maxShiftsPerMonth  Int    @default(25) // Maximum shifts per month limit
  
  absensi        Absensi[]
  loginLogs      LoginLog[]
  notifications  Notifikasi[]
  shifts         Shift[]      @relation("ShiftPegawai")
  swapFrom       ShiftSwap[]  @relation("SwapFrom")
  swapTo         ShiftSwap[]  @relation("SwapTo")
  token          Token[]
  supervisorApprovals ShiftSwap[] @relation("SupervisorApprover")
  targetApprovals     ShiftSwap[] @relation("TargetApprover")
  unitHeadApprovals   ShiftSwap[] @relation("UnitHeadApprover")
  
  // New relation for shift statistics
  shiftStats     UserShiftStats?
  preferences    UserPreference[]
  leaves         Leave[]
  
  // New relations for enhanced features
  auditLogs      AuditLog[]
  overtimeRequests OvertimeRequest[]
  leaveRequests    LeaveRequest[]
  overtimeReviews  OvertimeRequest[] @relation("OvertimeReviewer")
  leaveReviews     LeaveRequest[]    @relation("LeaveReviewer")

  @@map("users")
}

model Shift {
  id          Int          @id @default(autoincrement())
  tanggal     DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  jammulai    DateTime     @db.Time
  jamselesai  DateTime     @db.Time
  lokasishift String
  userId      Int
  lokasiEnum  LokasiShift?
  tipeEnum    TipeShift?
  tipeshift   String?
  shiftNumber Int?
  shiftType   ShiftType?
  
  // Enhanced shift tracking
  isAutoAssigned Boolean    @default(false)  // Was this shift auto-assigned by AI?
  priority       ShiftPriority @default(NORMAL)  // Shift priority level
  difficulty     ShiftDifficulty @default(STANDARD)  // Shift difficulty level
  overtimeHours  Float?      // Overtime hours if any
  notes          String?     // Additional notes for the shift
  
  absensi     Absensi?
  user        User         @relation("ShiftPegawai", fields: [userId], references: [id], onDelete: Cascade)
  swap        ShiftSwap?

  @@map("shifts")
}

// New model for detailed user shift statistics
model UserShiftStats {
  id                    Int      @id @default(autoincrement())
  userId                Int      @unique
  totalShifts           Int      @default(0)
  totalHours            Float    @default(0)
  totalOvertimeHours    Float    @default(0)
  shiftsThisMonth       Int      @default(0)
  shiftsThisWeek        Int      @default(0)
  consecutiveDays       Int      @default(0)
  maxConsecutiveDays    Int      @default(0)
  avgShiftsPerMonth     Float    @default(0)
  lastShiftDate         DateTime?
  nextShiftDate         DateTime?
  workloadScore         Float    @default(0)    // 0-100 workload score
  performanceRating     Float    @default(5.0)  // 1-10 performance rating
  preferredShiftTypes   String?  // JSON array of preferred shift types
  unavailableDates      String?  // JSON array of unavailable dates
  skillRatings          String?  // JSON object of skill ratings per location
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_shift_stats")
}

// New model for location capacity tracking
model LocationCapacity {
  id                Int      @id @default(autoincrement())
  location          LokasiShift
  date              DateTime
  maxCapacity       Int
  currentOccupancy  Int      @default(0)
  utilizationRate   Float    @default(0)
  peakHours         String?  // JSON array of peak hours
  isOverloaded      Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([location, date])
  @@map("location_capacities")
}

model Absensi {
  id        Int           @id @default(autoincrement())
  userId    Int
  shiftId   Int           @unique
  jamMasuk  DateTime?
  jamKeluar DateTime?
  status    AbsensiStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  catatan   String?
  foto      String?
  lokasi    String?
  shift     Shift         @relation(fields: [shiftId], references: [id])
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("absensis")
}

model ShiftSwap {
  id                   Int        @id @default(autoincrement())
  fromUserId           Int
  toUserId             Int
  shiftId              Int        @unique
  status               SwapStatus @default(PENDING)
  alasan               String?
  tanggalSwap          DateTime
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  rejectionReason      String?
  requiresUnitHead     Boolean    @default(false)
  supervisorApprovedAt DateTime?
  supervisorApprovedBy Int?
  targetApprovedAt     DateTime?
  targetApprovedBy     Int?
  unitHeadApprovedAt   DateTime?
  unitHeadApprovedBy   Int?
  fromUser             User       @relation("SwapFrom", fields: [fromUserId], references: [id], onDelete: Cascade)
  shift                Shift      @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  toUser               User       @relation("SwapTo", fields: [toUserId], references: [id], onDelete: Cascade)
  supervisorApprover   User?      @relation("SupervisorApprover", fields: [supervisorApprovedBy], references: [id], onDelete: SetNull)
  targetApprover       User?      @relation("TargetApprover", fields: [targetApprovedBy], references: [id], onDelete: SetNull)
  unitHeadApprover     User?      @relation("UnitHeadApprover", fields: [unitHeadApprovedBy], references: [id], onDelete: SetNull)

  @@map("shiftswaps")
}

model Kegiatan {
  id              Int               @id @default(autoincrement())
  nama            String
  deskripsi       String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  anggaran        Int?
  catatan         String?
  departemen      String?
  jenisKegiatan   String
  kapasitas       Int?
  kontak          String?
  lokasi          String
  lokasiDetail    String?
  penanggungJawab String
  prioritas       PrioritasKegiatan @default(SEDANG)
  status          StatusKegiatan    @default(DRAFT)
  tanggalMulai    DateTime
  tanggalSelesai  DateTime?
  targetPeserta   String[]
  waktuMulai      DateTime          @db.Time
  waktuSelesai    DateTime?         @db.Time

  @@map("kegiatans")
}

model Token {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiredAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

model LoginLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  ipAddress String?
  userAgent String?
  loginAt   DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("login_logs")
}

model Notifikasi {
  id           Int              @id @default(autoincrement())
  userId       Int
  judul        String
  pesan        String
  jenis        JenisNotifikasi
  status       StatusNotifikasi @default(UNREAD)
  data         Json?
  sentVia      SentViaChannel   @default(WEB)
  telegramSent Boolean          @default(false)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifikasi")
}

enum Role {
  ADMIN
  DOKTER
  PERAWAT
  STAF
  SUPERVISOR
}

enum Gender {
  L
  P
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum PrioritasKegiatan {
  RENDAH
  SEDANG
  TINGGI
  URGENT
}

enum StatusKegiatan {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

enum SentViaChannel {
  WEB
  TELEGRAM
  BOTH
}

enum AbsensiStatus {
  HADIR
  TERLAMBAT
  IZIN
  ALFA
}

enum SwapStatus {
  PENDING
  APPROVED_BY_TARGET
  REJECTED_BY_TARGET
  WAITING_UNIT_HEAD
  REJECTED_BY_UNIT_HEAD
  WAITING_SUPERVISOR
  REJECTED_BY_SUPERVISOR
  APPROVED
}

enum LokasiShift {
  GEDUNG_ADMINISTRASI
  RAWAT_JALAN
  RAWAT_INAP
  GAWAT_DARURAT
  LABORATORIUM
  FARMASI
  RADIOLOGI
  GIZI
  KEAMANAN
  LAUNDRY
  CLEANING_SERVICE
  SUPIR
  ICU
  NICU
  // Add new locations for better coverage
  HEMODIALISA
  FISIOTERAPI
  KAMAR_OPERASI
  RECOVERY_ROOM
  EMERGENCY_ROOM
}

enum TipeShift {
  PAGI
  SIANG
  MALAM
  ON_CALL
  JAGA
  // Add new shift types
  LIBUR
  CUTI
  SAKIT
  TRAINING
}

enum ShiftType {
  GEDUNG_ADMINISTRASI
  RAWAT_JALAN
  RAWAT_INAP_3_SHIFT
  GAWAT_DARURAT_3_SHIFT
  LABORATORIUM_2_SHIFT
  FARMASI_2_SHIFT
  RADIOLOGI_2_SHIFT
  GIZI_2_SHIFT
  KEAMANAN_2_SHIFT
  LAUNDRY_REGULER
  CLEANING_SERVICE
  SUPIR_2_SHIFT
  // Add new shift types for enhanced locations
  HEMODIALISA_2_SHIFT
  FISIOTERAPI_REGULER
  KAMAR_OPERASI_3_SHIFT
}

// New enums for enhanced functionality
enum WorkloadStatus {
  UNDERLOADED    // < 50% capacity
  NORMAL         // 50-80% capacity
  HIGH           // 80-90% capacity
  OVERWORKED     // 90-100% capacity
  CRITICAL       // > 100% capacity
}

enum SkillLevel {
  TRAINEE        // New employee, needs supervision
  JUNIOR         // Basic skills, can handle standard shifts
  SENIOR         // Advanced skills, can handle complex shifts
  EXPERT         // Expert level, can train others
  SPECIALIST     // Specialized skills for specific areas
}

enum ShiftPriority {
  LOW            // Can be postponed if needed
  NORMAL         // Standard priority
  HIGH           // Important, should be filled
  URGENT         // Critical, must be filled immediately
  EMERGENCY      // Emergency coverage needed
}

enum ShiftDifficulty {
  EASY           // Low complexity, suitable for juniors
  STANDARD       // Normal complexity
  CHALLENGING    // High complexity, needs experienced staff
  CRITICAL       // Critical care, needs specialists
  EMERGENCY      // Emergency situations
}

enum JenisNotifikasi {
  REMINDER_SHIFT
  KONFIRMASI_TUKAR_SHIFT
  PERSETUJUAN_CUTI
  KEGIATAN_HARIAN
  ABSENSI_TERLAMBAT
  SHIFT_BARU_DITAMBAHKAN
  SISTEM_INFO
  PENGUMUMAN
  PERSONAL_REMINDER_ABSENSI
  TUGAS_PERSONAL
  HASIL_EVALUASI_PERSONAL
  KONFIRMASI_SHIFT_SWAP_PERSONAL
  PENGUMUMAN_INTERAKTIF
  NOTIFIKASI_DIREKTUR
  REMINDER_MEETING_PERSONAL
  PERINGATAN_PERSONAL
}

enum StatusNotifikasi {
  UNREAD
  READ
  ARCHIVED
}

// Model for user preferences
model UserPreference {
  id              Int      @id @default(autoincrement())
  userId          Int
  preferenceType  PreferenceType
  value           String   // JSON value for complex preferences
  priority        Int      @default(1) // 1=low, 5=high
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_preferences")
}

// Model for leave/cuti requests
model Leave {
  id          Int         @id @default(autoincrement())
  userId      Int
  startDate   DateTime
  endDate     DateTime
  leaveType   LeaveType
  reason      String?
  status      LeaveStatus @default(PENDING)
  requestedAt DateTime    @default(now())
  approvedAt  DateTime?
  approvedBy  Int?
  rejectedAt  DateTime?
  notes       String?
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("leaves")
}

enum PreferenceType {
  PREFERRED_SHIFT_TYPE
  DAY_OFF
  LOCATION_PREFERENCE
  TIME_PREFERENCE
  WORKLOAD_LIMIT
  NOTIFICATION_SETTING
}

enum LeaveType {
  ANNUAL_LEAVE
  SICK_LEAVE
  EMERGENCY_LEAVE
  MATERNITY_LEAVE
  PERSONAL_LEAVE
  STUDY_LEAVE
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

// New model for audit trail
model AuditLog {
  id          String    @id @default(cuid())
  userId      Int
  action      AuditAction
  entityType  EntityType
  entityId    String
  oldData     String?   // JSON string of old data
  newData     String?   // JSON string of new data
  reason      String?
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime  @default(now())
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("audit_logs")
}

// New model for overtime requests
model OvertimeRequest {
  id              String    @id @default(cuid())
  userId          Int
  requestDate     DateTime
  shiftDate       DateTime
  hoursRequested  Float
  reason          String
  status          RequestStatus @default(PENDING)
  requestedAt     DateTime  @default(now())
  reviewedAt      DateTime?
  reviewedBy      Int?
  reviewerNotes   String?
  approvedHours   Float?
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewer        User?     @relation("OvertimeReviewer", fields: [reviewedBy], references: [id])
  
  @@map("overtime_requests")
}

// New model for leave requests
model LeaveRequest {
  id              String      @id @default(cuid())
  userId          Int
  leaveType       LeaveType
  startDate       DateTime
  endDate         DateTime
  totalDays       Int
  reason          String
  status          RequestStatus @default(PENDING)
  requestedAt     DateTime    @default(now())
  reviewedAt      DateTime?
  reviewedBy      Int?
  reviewerNotes   String?
  attachments     String?     // JSON array of file paths
  emergencyContact String?
  
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewer        User?       @relation("LeaveReviewer", fields: [reviewedBy], references: [id])
  
  @@map("leave_requests")
}

// Enhanced enums
enum AuditAction {
  CREATE
  UPDATE
  DELETE
  APPROVE
  REJECT
  REQUEST
  CANCEL
  VIEW
}

enum EntityType {
  SHIFT
  OVERTIME
  LEAVE
  SWAP
  USER
  ATTENDANCE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  EXPIRED
}
