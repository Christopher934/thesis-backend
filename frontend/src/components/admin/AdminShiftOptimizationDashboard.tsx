'use client';import React, { useState, useEffect } from 'react';import ContentCard from '@/components/ui/ContentCard';import PrimaryButton from '@/components/ui/PrimaryButton';import {   AlertTriangle,   Users,   Building,   TrendingUp,   Clock,  Activity,  UserCheck,  MapPin} from 'lucide-react';interface WorkloadAlert {  id: number;  employeeId: string;  employeeName: string;  role: string;  currentShifts: number;  consecutiveDays: number;  status: 'LIGHT' | 'NORMAL' | 'HIGH' | 'OVERWORKED' | 'CRITICAL';  recommendation: string;}interface LocationCapacity {  location: string;  current: number;  capacity: number;  utilization: number;}interface DashboardData {  workloadAlerts: WorkloadAlert[];  locationCapacity: LocationCapacity[];  shiftDistribution: any[];  upcomingConflicts: any[];  summary: {    totalEmployees: number;    activeShifts: number;    overworkedEmployees: number;    averageUtilization: number;  };}const AdminShiftOptimizationDashboard: React.FC = () => {  const [dashboardData, setDashboardData] = useState<DashboardData | null>(null);  const [loading, setLoading] = useState(true);  const [error, setError] = useState<string | null>(null);  const [activeTab, setActiveTab] = useState('workload');  useEffect(() => {    const fetchDashboardData = async () => {      try {        const response = await fetch('/api/admin/dashboard');        if (!response.ok) {          throw new Error('Failed to fetch dashboard data');        }        const data = await response.json();        setDashboardData(data);      } catch (err) {        setError(err instanceof Error ? err.message : 'An error occurred');      } finally {        setLoading(false);      }    };    fetchDashboardData();  }, []);  const getStatusColor = (status: string) => {    switch (status) {      case 'CRITICAL': return 'bg-red-600 text-white';      case 'OVERWORKED': return 'bg-orange-500 text-white';      case 'HIGH': return 'bg-yellow-500 text-black';      case 'NORMAL': return 'bg-green-500 text-white';      case 'LIGHT': return 'bg-blue-500 text-white';      default: return 'bg-gray-500 text-white';    }  };  const getUtilizationColor = (utilization: number) => {    if (utilization >= 90) return 'text-red-600';    if (utilization >= 75) return 'text-orange-600';    if (utilization >= 50) return 'text-yellow-600';    return 'text-green-600';  };  if (loading) {    return (      <div className="p-6">        <div className="animate-pulse space-y-4">          <div className="h-8 bg-gray-200 rounded w-1/4"></div>          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">            {[...Array(4)].map((_, i) => (              <div key={i} className="h-32 bg-gray-200 rounded"></div>            ))}          </div>        </div>      </div>    );  }  if (error) {    return (      <div className="p-6">        <div className="p-4 bg-red-50 border border-red-200 rounded-lg">          <div className="flex items-center">            <AlertTriangle className="h-4 w-4 text-red-600 mr-2" />            <span className="text-red-800">Error loading dashboard: {error}</span>          </div>        </div>      </div>    );  }  return (    <div className="p-6 space-y-6">      {/* Header */}      <div className="flex items-center justify-between">        <div>          <h1 className="text-3xl font-bold text-gray-900">Admin Dashboard</h1>          <p className="text-gray-600">Workforce optimization & monitoring</p>        </div>        <button           onClick={() => window.location.reload()}           className="flex items-center px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"        >          <Activity className="w-4 h-4 mr-2" />          Refresh Data        </button>      </div>      {/* Summary Cards */}      {dashboardData && (        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">          <ContentCard>            <div className="p-6">              <div className="flex flex-row items-center justify-between space-y-0 pb-2">                <h3 className="text-sm font-medium">Total Employees</h3>                <Users className="h-4 w-4 text-gray-500" />              </div>              <div className="text-2xl font-bold">{dashboardData.summary.totalEmployees}</div>            </div>          </ContentCard>          <ContentCard>            <div className="p-6">              <div className="flex flex-row items-center justify-between space-y-0 pb-2">                <h3 className="text-sm font-medium">Active Shifts</h3>                <Clock className="h-4 w-4 text-gray-500" />              </div>              <div className="text-2xl font-bold">{dashboardData.summary.activeShifts}</div>            </div>          </ContentCard>          <ContentCard>            <div className="p-6">              <div className="flex flex-row items-center justify-between space-y-0 pb-2">                <h3 className="text-sm font-medium">Overworked Staff</h3>                <AlertTriangle className="h-4 w-4 text-orange-500" />              </div>              <div className="text-2xl font-bold text-orange-600">                {dashboardData.summary.overworkedEmployees}              </div>            </div>          </ContentCard>          <ContentCard>            <div className="p-6">              <div className="flex flex-row items-center justify-between space-y-0 pb-2">                <h3 className="text-sm font-medium">Avg Utilization</h3>                <TrendingUp className="h-4 w-4 text-gray-500" />              </div>              <div className="text-2xl font-bold">                {dashboardData.summary.averageUtilization?.toFixed(1)}%              </div>            </div>          </ContentCard>        </div>      )}      {/* Tabs Navigation */}      <div className="space-y-4">        <div className="border-b border-gray-200">          <nav className="-mb-px flex space-x-8">            <button              onClick={() => setActiveTab('workload')}              className={`py-2 px-1 border-b-2 font-medium text-sm ${                activeTab === 'workload'                  ? 'border-blue-500 text-blue-600'                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'              }`}            >              Workload Alerts            </button>            <button              onClick={() => setActiveTab('capacity')}              className={`py-2 px-1 border-b-2 font-medium text-sm ${                activeTab === 'capacity'                  ? 'border-blue-500 text-blue-600'                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'              }`}            >              Location Capacity            </button>            <button              onClick={() => setActiveTab('optimization')}              className={`py-2 px-1 border-b-2 font-medium text-sm ${                activeTab === 'optimization'                  ? 'border-blue-500 text-blue-600'                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'              }`}            >              Shift Optimization            </button>          </nav>        </div>        {/* Tab Content */}        {activeTab === 'workload' && (          <ContentCard>            <div className="p-6">              <div className="flex items-center justify-between mb-4">                <h3 className="text-lg font-semibold">Workload Alerts</h3>                <span className="text-sm text-gray-500">                  {dashboardData?.workloadAlerts?.length || 0} alerts                </span>              </div>                            {dashboardData?.workloadAlerts?.length ? (                <div className="space-y-3">                  {dashboardData.workloadAlerts.map((alert) => (                    <div key={alert.id} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">                      <div className="flex items-center space-x-3">                        <UserCheck className="h-5 w-5 text-gray-600" />                        <div>                          <p className="font-medium">{alert.employeeName}</p>                          <p className="text-sm text-gray-600">{alert.role}</p>                        </div>                      </div>                                            <div className="flex items-center space-x-4">                        <div className="text-right">                          <p className="text-sm font-medium">{alert.currentShifts} shifts</p>                          <p className="text-xs text-gray-500">{alert.consecutiveDays} consecutive days</p>                        </div>                        <span className={`px-2 py-1 text-xs rounded-full ${getStatusColor(alert.status)}`}>                          {alert.status}                        </span>                      </div>                    </div>                  ))}                </div>              ) : (                <p className="text-gray-500 text-center py-8">No workload alerts</p>              )}            </div>          </ContentCard>        )}        {activeTab === 'capacity' && (          <ContentCard>            <div className="p-6">              <div className="flex items-center justify-between mb-4">                <h3 className="text-lg font-semibold">Location Capacity</h3>                <span className="text-sm text-gray-500">                  {dashboardData?.locationCapacity?.length || 0} locations                </span>              </div>              {dashboardData?.locationCapacity?.length ? (                <div className="space-y-3">                  {dashboardData.locationCapacity.map((location, index) => (                    <div key={index} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">                      <div className="flex items-center space-x-3">                        <MapPin className="h-5 w-5 text-gray-600" />                        <div>                          <p className="font-medium">{location.location}</p>                          <p className="text-sm text-gray-600">                            {location.current} / {location.capacity} staff                          </p>                        </div>                      </div>                                            <div className="flex items-center space-x-4">                        <div className="w-32 bg-gray-200 rounded-full h-2">                          <div                             className={`h-2 rounded-full ${                              location.utilization >= 90 ? 'bg-red-500' :                              location.utilization >= 75 ? 'bg-orange-500' :                              location.utilization >= 50 ? 'bg-yellow-500' :                              'bg-green-500'                            }`}                            style={{ width: `${Math.min(location.utilization, 100)}%` }}                          ></div>                        </div>                        <span className={`font-medium ${getUtilizationColor(location.utilization)}`}>                          {location.utilization.toFixed(1)}%                        </span>                      </div>                    </div>                  ))}                </div>              ) : (                <p className="text-gray-500 text-center py-8">No capacity data available</p>              )}            </div>          </ContentCard>        )}        {activeTab === 'optimization' && (          <ContentCard>            <div className="p-6">              <div className="flex items-center justify-between mb-4">                <h3 className="text-lg font-semibold">Shift Optimization</h3>              </div>                            <div className="space-y-4">                <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">                  <h4 className="font-medium text-blue-900 mb-2">AI-Powered Optimization</h4>                  <p className="text-blue-800 text-sm mb-3">                    Use our hybrid algorithm (Greedy + Backtracking) to automatically create optimal shift assignments.                  </p>                  <PrimaryButton                     onClick={() => window.location.href = '/dashboard/list/managemenjadwal'}                    className="text-sm"                  >                    Go to Schedule Management                  </PrimaryButton>                </div>                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">                  <div className="p-4 bg-gray-50 rounded-lg">                    <h4 className="font-medium mb-2">Recent Optimizations</h4>                    <p className="text-sm text-gray-600">                      Track recent automatic schedule optimizations and their success rates.                    </p>                  </div>                                    <div className="p-4 bg-gray-50 rounded-lg">                    <h4 className="font-medium mb-2">Performance Metrics</h4>                    <p className="text-sm text-gray-600">                      Monitor algorithm performance and optimization effectiveness.                    </p>                  </div>                </div>              </div>            </div>          </ContentCard>        )}      </div>    </div>  );};export default AdminShiftOptimizationDashboard;